name: Build and Deploy with ArgoCD

on:
  push:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update Helm values with new image
      run: |
        IMAGE_TAG="main-${GITHUB_SHA:0:7}"
        sed -i "s|repository: webhook-cronjob|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|g" helm/values.yaml
        sed -i "s|tag: \"latest\"|tag: \"$IMAGE_TAG\"|g" helm/values.yaml
        
        # Commit the changes back to trigger ArgoCD sync
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add helm/values.yaml
        git diff --staged --quiet || git commit -m "Update image tag to $IMAGE_TAG [skip ci]"
        git push

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    - name: Sync ArgoCD Application
      run: |
        # Login to ArgoCD
        argocd login ${{ secrets.ARGOCD_SERVER }} \
          --username ${{ secrets.ARGOCD_USERNAME }} \
          --password ${{ secrets.ARGOCD_PASSWORD }} \
          --insecure
        
        # Sync the application
        argocd app sync webhook-cronjob
        
        # Wait for sync to complete
        argocd app wait webhook-cronjob --timeout 300
        
        echo "âœ… Deployment completed successfully!"
